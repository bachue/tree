define(function(require,exports,module){"use strict";var MAX_TOKEN_COUNT=1e3;var useragent=require("../lib/useragent");var TokenizerModule=require("../tokenizer");function patch(obj,name,regexp,replacement){eval("obj['"+name+"']="+obj[name].toString().replace(regexp,replacement))}if(useragent.isIE&&useragent.isIE<10&&window.top.document.compatMode==="BackCompat")useragent.isOldIE=true;if(typeof document!="undefined"&&!document.documentElement.querySelector){useragent.isOldIE=true;var qs=function(el,selector){if(selector.charAt(0)=="."){var classNeme=selector.slice(1)}else{var m=selector.match(/(\w+)=(\w+)/);var attr=m&&m[1];var attrVal=m&&m[2]}for(var i=0;i<el.all.length;i++){var ch=el.all[i];if(classNeme){if(ch.className.indexOf(classNeme)!=-1)return ch}else if(attr){if(ch.getAttribute(attr)==attrVal)return ch}}};var sb=require("./searchbox").SearchBox.prototype;patch(sb,"$initElements",/([^\s=]*).querySelector\((".*?")\)/g,"qs($1, $2)")}var compliantExecNpcg=/()??/.exec("")[1]===undefined;if(compliantExecNpcg)return;var proto=TokenizerModule.Tokenizer.prototype;TokenizerModule.Tokenizer_orig=TokenizerModule.Tokenizer;proto.getLineTokens_orig=proto.getLineTokens;patch(TokenizerModule,"Tokenizer","ruleRegExps.push(adjustedregex);\n",function(m){return m+'        if (state[i].next && RegExp(adjustedregex).test(""))\n            rule._qre = RegExp(adjustedregex, "g");\n        '});TokenizerModule.Tokenizer.prototype=proto;patch(proto,"getLineTokens",/if \(match\[i \+ 1\] === undefined\)\s*continue;/,"if (!match[i + 1]) {\n        if (value)continue;\n        var qre = state[mapping[i]]._qre;\n        if (!qre) continue;\n        qre.lastIndex = lastIndex;\n        if (!qre.exec(line) || qre.lastIndex != lastIndex)\n            continue;\n    }");patch(require("../mode/text").Mode.prototype,"getTokenizer",/Tokenizer/,"TokenizerModule.Tokenizer");useragent.isOldIE=true});