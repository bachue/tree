define(function(require,exports,module){"use strict";var oop=require("../lib/oop");var TextMode=require("./text").Mode;var Tokenizer=require("../tokenizer").Tokenizer;var RubyHighlightRules=require("./ruby_highlight_rules").RubyHighlightRules;var MatchingBraceOutdent=require("./matching_brace_outdent").MatchingBraceOutdent;var Range=require("../range").Range;var FoldMode=require("./folding/coffee").FoldMode;var Mode=function(){this.HighlightRules=RubyHighlightRules;this.$outdent=new MatchingBraceOutdent;this.foldingRules=new FoldMode};oop.inherits(Mode,TextMode);(function(){this.lineCommentStart="#";this.getNextLineIndent=function(state,line,tab){var indent=this.$getIndent(line);var tokenizedLine=this.getTokenizer().getLineTokens(line,state);var tokens=tokenizedLine.tokens;if(tokens.length&&tokens[tokens.length-1].type=="comment"){return indent}if(state=="start"){var match=line.match(/^.*[\{\(\[]\s*$/);var startingClassOrMethod=line.match(/^\s*(class|def|module)\s.*$/);var startingDoBlock=line.match(/.*do(\s*|\s+\|.*\|\s*)$/);var startingConditional=line.match(/^\s*(if|else)\s*/);if(match||startingClassOrMethod||startingDoBlock||startingConditional){indent+=tab}}return indent};this.checkOutdent=function(state,line,input){return/^\s+end$/.test(line+input)||/^\s+}$/.test(line+input)||/^\s+else$/.test(line+input)};this.autoOutdent=function(state,doc,row){var indent=this.$getIndent(doc.getLine(row));var tab=doc.getTabString();if(indent.slice(-tab.length)==tab)doc.remove(new Range(row,indent.length-tab.length,row,indent.length))};this.$id="ace/mode/ruby"}).call(Mode.prototype);exports.Mode=Mode});