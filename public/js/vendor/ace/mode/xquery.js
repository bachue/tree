define(function(require,exports,module){"use strict";var WorkerClient=require("../worker/worker_client").WorkerClient;var oop=require("../lib/oop");var TextMode=require("./text").Mode;var XQueryLexer=require("./xquery/XQueryLexer").XQueryLexer;var Range=require("../range").Range;var XQueryBehaviour=require("./behaviour/xquery").XQueryBehaviour;var CStyleFoldMode=require("./folding/cstyle").FoldMode;var Mode=function(){this.$tokenizer=new XQueryLexer;this.$behaviour=new XQueryBehaviour;this.foldingRules=new CStyleFoldMode};oop.inherits(Mode,TextMode);(function(){this.getNextLineIndent=function(state,line,tab){var indent=this.$getIndent(line);var match=line.match(/\s*(?:then|else|return|[{\(]|<\w+>)\s*$/);if(match)indent+=tab;return indent};this.checkOutdent=function(state,line,input){if(!/^\s+$/.test(line))return false;return/^\s*[\}\)]/.test(input)};this.autoOutdent=function(state,doc,row){var line=doc.getLine(row);var match=line.match(/^(\s*[\}\)])/);if(!match)return 0;var column=match[1].length;var openBracePos=doc.findMatchingBracket({row:row,column:column});if(!openBracePos||openBracePos.row==row)return 0;var indent=this.$getIndent(doc.getLine(openBracePos.row));doc.replace(new Range(row,0,row,column-1),indent)};this.toggleCommentLines=function(state,doc,startRow,endRow){var i,line;var outdent=true;var re=/^\s*\(:(.*):\)/;for(i=startRow;i<=endRow;i++){if(!re.test(doc.getLine(i))){outdent=false;break}}var range=new Range(0,0,0,0);for(i=startRow;i<=endRow;i++){line=doc.getLine(i);range.start.row=i;range.end.row=i;range.end.column=line.length;doc.replace(range,outdent?line.match(re)[1]:"(:"+line+":)")}};this.createWorker=function(session){var worker=new WorkerClient(["ace"],"ace/mode/xquery_worker","XQueryWorker");var that=this;worker.attachToDocument(session.getDocument());worker.on("error",function(e){session.setAnnotations([e.data])});worker.on("ok",function(e){session.clearAnnotations()});worker.on("highlight",function(tokens){that.$tokenizer.tokens=tokens.data.tokens;that.$tokenizer.lines=session.getDocument().getAllLines();var rows=Object.keys(that.$tokenizer.tokens);for(var i=0;i<rows.length;i++){var row=parseInt(rows[i]);delete session.bgTokenizer.lines[row];delete session.bgTokenizer.states[row];session.bgTokenizer.fireUpdateEvent(row,row)}});return worker};this.$id="ace/mode/xquery"}).call(Mode.prototype);exports.Mode=Mode});