define(function(require,exports,module){"use strict";var oop=require("../lib/oop");var Mirror=require("../worker/mirror").Mirror;var JSONParseTreeHandler=require("./xquery/JSONParseTreeHandler").JSONParseTreeHandler;var XQueryParser=require("./xquery/XQueryParser").XQueryParser;var SemanticHighlighter=require("./xquery/visitors/SemanticHighlighter").SemanticHighlighter;var XQueryWorker=exports.XQueryWorker=function(sender){Mirror.call(this,sender);this.setTimeout(200)};oop.inherits(XQueryWorker,Mirror);(function(){this.onUpdate=function(){this.sender.emit("start");var value=this.doc.getValue();var h=new JSONParseTreeHandler(value);var parser=new XQueryParser(value,h);try{parser.parse_XQuery();this.sender.emit("ok");var ast=h.getParseTree();var highlighter=new SemanticHighlighter(ast,value);var tokens=highlighter.getTokens();this.sender.emit("highlight",{tokens:tokens,lines:highlighter.lines})}catch(e){if(e instanceof parser.ParseException){var prefix=value.substring(0,e.getBegin());var line=prefix.split("\n").length;var column=e.getBegin()-prefix.lastIndexOf("\n");var message=parser.getErrorMessage(e);this.sender.emit("error",{row:line-1,column:column,text:message,type:"error"})}else{throw e}}}}).call(XQueryWorker.prototype)});