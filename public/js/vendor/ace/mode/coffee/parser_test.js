if(typeof process!=="undefined"){require("amd-loader")}define(function(require,exports,module){"use strict";var assert=require("../../test/assertions");var coffee=require("../coffee/coffee-script");function assertLocation(e,sl,sc,el,ec){assert.equal(e.location.first_line,sl);assert.equal(e.location.first_column,sc);assert.equal(e.location.last_line,el);assert.equal(e.location.last_column,ec)}function parse(str){try{coffee.parse(str).compile()}catch(e){return e}}module.exports={"test parse valid coffee script":function(){coffee.parse("square = (x) -> x * x")},"test parse invalid coffee script":function(){var e=parse("a = 12 f");assert.equal(e.message,"Unexpected 'IDENTIFIER'");assertLocation(e,0,4,0,5)},"test parse missing bracket":function(){var e=parse("a = 12 f {\n\n");assert.equal(e.message,"missing }");assertLocation(e,0,10,0,10)},"test unexpected indent":function(){var e=parse("a\n  a\n");assert.equal(e.message,"Unexpected 'INDENT'");assertLocation(e,1,0,1,1)},"test invalid destructuring":function(){var e=parse("\n{b: 5} = {}");assert.equal(e.message,'"5" cannot be assigned');assertLocation(e,1,4,1,4)}}});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()}