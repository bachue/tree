if(typeof process!=="undefined"){require("amd-loader")}define(function(require,exports,module){"use strict";function repeat(str,times){return new Array(times+1).join(str)}var EditSession=require("./../edit_session").EditSession,Editor=require("./../editor").Editor,UndoManager=require("./../undomanager").UndoManager,MockRenderer=require("./../test/mockrenderer").MockRenderer,assert=require("./../test/assertions"),keys=require("./../lib/keys"),vim=require("./vim"),editor,keyCodeByFuncKey={},tests={};function initKeyCodeByFuncKey(){for(var keyCode in keys.FUNCTION_KEYS){var funcKey=keys.FUNCTION_KEYS[keyCode];keyCodeByFuncKey[funcKey]=keyCode}}function initEditor(docString){var session=new EditSession(docString.split("\n"));var undoManager=new UndoManager;session.setUndoManager(undoManager);editor=new Editor(new MockRenderer,session);editor.setKeyboardHandler(vim.handler)}function sendKeys(){for(var argInt=0;argInt<arguments.length;argInt++){var arg=arguments[argInt];var keyMods=arg.split(/[\-]/);var trailingKeys=keyMods.pop();var hashId=0;for(var keyModIndex in keyMods){var keyMod=keyMods[keyModIndex];var lowerKeyMod=keyMod.toLowerCase();if(keys.KEY_MODS.hasOwnProperty(lowerKeyMod)){hashId|=keys.KEY_MODS[lowerKeyMod]}}if(hashId===0){trailingKeys=arg}var keyCode;if(keyCodeByFuncKey.hasOwnProperty(trailingKeys)){keyCode=keyCodeByFuncKey[trailingKeys];editor.onCommandKey({},hashId,keyCode)}else{if(hashId!==0){keyCode=trailingKeys.toUpperCase().charCodeAt(0);editor.onCommandKey({},hashId,keyCode)}else{for(var i=0;i<trailingKeys.length;i++){var key=trailingKeys.charAt(i);editor.onTextInput(key);editor.session.$syncInformUndoManager()}}}}}function assertContent(expectedText){var actualText=editor.session.toString();assert.strictEqual(actualText,expectedText,"Content expected: "+expectedText+", actual: "+actualText)}function assertPosition(expectedRow,expectedCol){var actualPosition=editor.getCursorPosition();var actualRow=actualPosition.row;var actualCol=actualPosition.column;assert.strictEqual(actualRow,expectedRow,"Row expected: "+expectedRow+", actual: "+actualRow);assert.strictEqual(actualCol,expectedCol,"Column expected: "+expectedCol+", actual: "+actualCol)}function addTest(title,chapter,section,testFunction){var href="http://vimdoc.sourceforge.net/htmldoc/usr_"+chapter+".html#"+chapter+"."+section;var testName;if(location.protocol==="file:"){testName="test "+title+" (See "+href+")"}else{testName='test <a href="'+href+'" target="_blank">'+title+"</a>"}tests[testName]=testFunction}initKeyCodeByFuncKey();addTest("Insert text","02","2",function(){var text="A very intelligent turtle\nFound programming UNIX a hurdle";initEditor("");sendKeys("i",text,"Esc");assertContent(text);sendKeys("Esc","Esc");assertContent(text)});addTest("Moving around","02","3",function(){initEditor(" k \nh l\n j ");sendKeys("hjj");assertPosition(2,0);sendKeys("jll");assertPosition(2,2);sendKeys("lkk");assertPosition(0,2);sendKeys("khh");assertPosition(0,0)});addTest("Deleting characters","02","4",function(){var text="A very intelligent turtle\nFound programming UNIX a hurdle";initEditor(text);sendKeys("xxxxxxx");assertContent(text.substring(7));sendKeys("iA young ","Esc");assertContent("A young intelligent turtle\nFound programming UNIX a hurdle");sendKeys("dd");assertContent("Found programming UNIX a hurdle");sendKeys("ddiA young intelligent\nturtle","Esc","kJ");assertContent("A young intelligent turtle")});addTest("Undo and Redo [PARTIAL]","02","5",function(){var text="A young intelligent turtle";initEditor(text);sendKeys("ddu");assertContent(text);sendKeys("0xxxxxxx");assertContent(text.substring(7));for(var i=6;i>=0;i--){sendKeys("u");assertContent(text.substring(i))}sendKeys("ctrl-r","ctrl-r");assertContent(text.substring(2));text="A very intelligent turtle";sendKeys("ddi",text,"Esc");sendKeys("0wxxxxxwwxxxxxx");assertContent("A intelligent ")});addTest("Other editing commands [PARTIAL]","02","6",function(){var text="and that's not saying much for the turtle.";initEditor(text);sendKeys("$xa!!!","Esc");assertContent(text.slice(0,-1)+"!!!");var text1="A very intelligent turtle";var text2="Found programming UNIX a hurdle";sendKeys("ddi",text1+"\n"+text2,"Esc");var text3="That liked using Vim";sendKeys("ko",text3,"Esc");assertContent([text1,text3,text2].join("\n"));sendKeys("O","Esc");assertContent([text1,"",text3,text2].join("\n"));sendKeys("a!!!","Esc");assertContent([text1,"!!!",text3,text2].join("\n"));sendKeys("hhh3x");assertContent([text1,"",text3,text2].join("\n"))});addTest("Getting out [PARTIAL]","02","7",function(){initEditor("");sendKeys("ZZ")});addTest("Finding help [PARTIAL]","02","8",function(){initEditor("");sendKeys(":help","Return");sendKeys("F1")});addTest("Word movement [PARTIAL]","03","1",function(){var text="This is a line with example text";initEditor(text);sendKeys("www3w");assertPosition(0,28);sendKeys("b2b");assertPosition(0,10);sendKeys("3le");assertPosition(0,18)});addTest("Moving to the start or end of a line","03","2",function(){var text="     This is a line with example text";var textLength=text.length;initEditor(text);sendKeys("$");assertPosition(0,36);sendKeys("0");assertPosition(0,0);sendKeys("End");assertPosition(0,36);sendKeys("Home");assertPosition(0,0);sendKeys("^");assertPosition(0,5);sendKeys("$^");assertPosition(0,5);sendKeys("ddaA young intelligent turtle\nFound programming UNIX a hurdle","Esc","k0");assertPosition(0,0);sendKeys("2$");assertPosition(1,30)});addTest("Moving to a character [PARTIAL]","03","3",function(){var text="To err is human.  To really foul up you need a computer.";initEditor(repeat(text,2));sendKeys("fh");assertPosition(0,10);sendKeys("3fl");assertPosition(0,31);sendKeys("Fh");assertPosition(0,10);sendKeys("Fh");assertPosition(0,10);sendKeys("2tn");assertPosition(0,39);sendKeys("Th");assertPosition(0,11);sendKeys("tn");assertPosition(0,13);sendKeys(";");assertPosition(0,39);sendKeys(",");assertPosition(0,15);sendKeys("0f","Esc","w");assertPosition(0,3)});addTest("Matching a parenthesis","03","4",function(){var text="if (a == (b * c) / d)\nif [a == [b * c] / d]\nif {a == {b * c} / d}";initEditor(text);sendKeys("%");assertPosition(0,20);sendKeys("%");assertPosition(0,3);sendKeys("0j%");assertPosition(1,20);sendKeys("%");assertPosition(1,3);sendKeys("0j%");assertPosition(2,20);sendKeys("%");assertPosition(2,3)});addTest("Moving to a specific line [PARTIAL]","03","5",function(){var text="first line of a file\n"+repeat("text text text text\n",8)+"last line of a file";initEditor(text);sendKeys("7G");assertPosition(6,0);sendKeys("gg");assertPosition(0,0);sendKeys("G");assertPosition(9,0)});addTest("Telling where you are [PARTIAL]","03","6",function(){});addTest("Scrolling around [PARTIAL]","03","7",function(){});addTest("Simple searches [PARTIAL]","03","8",function(){var text=repeat("To find the word #include\n",10);initEditor(text)});addTest("Simple search patterns [PARTIAL]","03","9",function(){});addTest("Using marks [PARTIAL]","03","10",function(){});addTest("Operators and motions [PARTIAL]","04","1",function(){initEditor("To err is human. To really foul up you need a computer.");sendKeys("5wd4w");assertContent("To err is human. you need a computer.")});addTest("Changing text [PARTIAL]","04","2",function(){initEditor("To err is human")});addTest("Repeating a change [PARTIAL]","04","3",function(){});addTest("Visual mode [PARTIAL]","04","4",function(){});addTest("Moving text [PARTIAL]","04","5",function(){});addTest("Copying text [PARTIAL]","04","6",function(){});addTest("Using the clipboard [PARTIAL]","04","7",function(){});addTest("Text objects [PARTIAL]","04","8",function(){});addTest("Replace mode [PARTIAL]","04","9",function(){});tests.name="vim_test.js";module.exports=tests});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()}