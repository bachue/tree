if(typeof process!=="undefined"){require("amd-loader")}define(function(require,exports,module){"use strict";var Tokenizer=require("./tokenizer").Tokenizer;var assert=require("./test/assertions");module.exports={"test: createSplitterRegexp":function(){var t=new Tokenizer({});var re=t.createSplitterRegexp("(a)(b)(?=[x)(])");assert.equal(re.source,"(a)(b)");var re=t.createSplitterRegexp("xc(?=([x)(]))");assert.equal(re.source,"xc");var re=t.createSplitterRegexp("(xc(?=([x)(])))");assert.equal(re.source,"(xc)");var re=t.createSplitterRegexp("(?=r)[(?=)](?=([x)(]))");assert.equal(re.source,"(?=r)[(?=)]");var re=t.createSplitterRegexp("(?=r)[(?=)](\\?=t)");assert.equal(re.source,"(?=r)[(?=)](\\?=t)");var re=t.createSplitterRegexp("[(?=)](\\?=t)");assert.equal(re.source,"[(?=)](\\?=t)")},"test: removeCapturingGroups":function(){var t=new Tokenizer({});var re=t.removeCapturingGroups("(ax(by))[()]");assert.equal(re,"(?:ax(?:by))[()]")}}});if(typeof module!=="undefined"&&module===require.main){require("asyncjs").test.testcase(module.exports).exec()}